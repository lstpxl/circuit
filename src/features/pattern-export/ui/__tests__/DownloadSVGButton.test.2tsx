// Now import JSDOM
// import { JSDOM } from "jsdom";

// Setup DOM environment immediately
// const dom = new JSDOM("<!DOCTYPE html><html><body></body></html>");
// global.document = dom.window.document;
// global.window = dom.window as unknown as Window & typeof globalThis;

// Now import React testing utilities
import { render, screen, fireEvent } from "@testing-library/react";
import { DownloadSVGButton } from "../DownloadSVGButton";

// Mock URL.createObjectURL and URL.revokeObjectURL
global.URL.createObjectURL = jest.fn(() => "mock-blob-url");
global.URL.revokeObjectURL = jest.fn();

// Mock XMLSerializer
global.XMLSerializer = jest.fn().mockImplementation(() => ({
	serializeToString: jest.fn(
		() => '<svg><rect width="100" height="100"/></svg>',
	),
}));

// Create a mock for document.createElement
const realCreateElement = document.createElement.bind(document);

let mockLink: HTMLAnchorElement;

const mockCreateElement = jest.fn((tagName: string) => {
	if (tagName === "a") {
		mockLink = realCreateElement("a") as HTMLAnchorElement;
		// Mock the click method
		mockLink.click = jest.fn();
		return mockLink;
	}
	return realCreateElement(tagName);
});

const mockAppendChild = jest.fn();
const mockRemoveChild = jest.fn();

// Mock link element
mockLink = {
	href: "",
	download: "",
	click: jest.fn(),
	style: {},
};

describe("DownloadSVGButton", () => {
	let mockFrameRef: React.RefObject<HTMLDivElement | null>;
	let mockSvgElement: Partial<SVGSVGElement>;

	beforeAll(() => {
		// Set up mocks once for all tests
		mockCreateElement.mockImplementation((tagName: string) => {
			if (tagName === "a") {
				return mockLink;
			}
			// For other elements, return a minimal mock
			return {
				tagName: tagName.toUpperCase(),
				appendChild: jest.fn(),
				removeChild: jest.fn(),
			};
		});

		// Replace the methods
		jest.spyOn(document, "createElement").mockImplementation(mockCreateElement);
		jest
			.spyOn(document.body, "appendChild")
			.mockImplementation(mockAppendChild);
		jest
			.spyOn(document.body, "removeChild")
			.mockImplementation(mockRemoveChild);

		// Create mock SVG element
		mockSvgElement = {
			tagName: "svg",
		};

		// Create mock frame div
		const mockFrameDiv = {
			querySelector: jest.fn().mockReturnValue(mockSvgElement),
		} as unknown as HTMLDivElement;

		// Create ref
		mockFrameRef = {
			current: mockFrameDiv,
		} as React.RefObject<HTMLDivElement | null>;
	});

	beforeEach(() => {
		// Clear mock calls but keep implementations
		jest.clearAllMocks();

		// Reset mock link properties
		mockLink.href = "";
		mockLink.download = "";

		if (mockFrameRef.current) {
			(mockFrameRef.current.querySelector as jest.Mock).mockReturnValue(
				mockSvgElement,
			);
		}
	});

	afterAll(() => {
		// Restore all mocks
		jest.restoreAllMocks();
	});

	it("should render with download icon and default title", () => {
		render(<DownloadSVGButton frameId={mockFrameRef} />);

		const button = screen.getByRole("button");
		expect(button).toBeInTheDocument();
		expect(button).toHaveAttribute("title", "Download SVG");
	});

	it("should serialize SVG and trigger download when clicked", () => {
		render(<DownloadSVGButton frameId={mockFrameRef} />);

		const button = screen.getByRole("button");
		fireEvent.click(button);

		// Check that querySelector was called to find SVG
		expect(mockFrameRef.current?.querySelector).toHaveBeenCalledWith("svg");

		// Check that XMLSerializer was used
		expect(XMLSerializer).toHaveBeenCalled();

		// Check that a blob URL was created
		expect(global.URL.createObjectURL).toHaveBeenCalled();

		// Check that download link was created and configured
		expect(mockCreateElement).toHaveBeenCalledWith("a");
		expect(mockLink.href).toBe("mock-blob-url");
		expect(mockLink.download).toMatch(/pattern\d+\.svg/);

		// Check DOM manipulation
		expect(mockAppendChild).toHaveBeenCalledWith(mockLink);
		expect(mockLink.click).toHaveBeenCalled();
		expect(mockRemoveChild).toHaveBeenCalledWith(mockLink);
		expect(global.URL.revokeObjectURL).toHaveBeenCalledWith("mock-blob-url");
	});

	it("should show success title after download", () => {
		render(<DownloadSVGButton frameId={mockFrameRef} />);

		const button = screen.getByRole("button");
		fireEvent.click(button);

		expect(button).toHaveAttribute("title", "Downloaded!");
	});

	it("should handle case when frameId.current is null", () => {
		const nullFrameRef = { current: null };

		render(<DownloadSVGButton frameId={nullFrameRef} />);

		const button = screen.getByRole("button");
		fireEvent.click(button);

		// Should not attempt to create download
		expect(mockCreateElement).not.toHaveBeenCalledWith("a");
		expect(mockLink.click).not.toHaveBeenCalled();
	});

	it("should handle case when no SVG element is found", () => {
		const frameWithoutSvg = {
			querySelector: jest.fn().mockReturnValue(null),
		};

		const frameRefWithoutSvg: React.RefObject<HTMLDivElement> = {
			current: frameWithoutSvg as unknown as HTMLDivElement,
		};

		render(<DownloadSVGButton frameId={frameRefWithoutSvg} />);

		const button = screen.getByRole("button");
		fireEvent.click(button);

		// Should call querySelector but not proceed with download
		expect(frameWithoutSvg.querySelector).toHaveBeenCalledWith("svg");
		expect(XMLSerializer).not.toHaveBeenCalled();
		expect(mockLink.click).not.toHaveBeenCalled();
	});

	it("should create blob with correct MIME type", () => {
		const originalBlob = global.Blob;
		const mockBlob = jest.fn() as unknown as typeof Blob;
		global.Blob = mockBlob;

		render(<DownloadSVGButton frameId={mockFrameRef} />);

		const button = screen.getByRole("button");
		fireEvent.click(button);

		expect(mockBlob).toHaveBeenCalledWith(
			['<svg><rect width="100" height="100"/></svg>'],
			{ type: "image/svg+xml;charset=utf-8" },
		);

		global.Blob = originalBlob;
	});

	it("should generate filename with timestamp", () => {
		const mockTimestamp = 1672531200000;
		const originalDateNow = Date.now;
		Date.now = jest.fn(() => mockTimestamp);

		render(<DownloadSVGButton frameId={mockFrameRef} />);

		const button = screen.getByRole("button");
		fireEvent.click(button);

		expect(mockLink.download).toBe(`pattern${mockTimestamp}.svg`);

		Date.now = originalDateNow;
	});

	it("should clean up properly after download", () => {
		render(<DownloadSVGButton frameId={mockFrameRef} />);

		const button = screen.getByRole("button");
		fireEvent.click(button);

		// Verify cleanup sequence
		expect(mockAppendChild).toHaveBeenCalledWith(mockLink);
		expect(mockLink.click).toHaveBeenCalled();
		expect(mockRemoveChild).toHaveBeenCalledWith(mockLink);
		expect(global.URL.revokeObjectURL).toHaveBeenCalledWith("mock-blob-url");
	});
});
